import TelegramBotClient from 'node-telegram-bot-api'
import StateMachine from 'javascript-state-machine'
import respondTo from './modules/registration'
import {STORE} from './modules/variables'
import changeAccountData from './modules/changeAccountData'
import {botOptions} from './modules/keyboards'
import leaveReview from './modules/leaveReview'
// import sequelize from '../db/db'
const sequelize = require('../db/db')
const models = require('../db/models/models')

export default class Bot {
  constructor(token) {
    this.client = new TelegramBotClient(token, { polling: true })
    this.website = STORE
  }

  async start() {

    try {
      await sequelize.authenticate()
      await sequelize.sync()
    } catch (e) {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DB —Å–ª–æ–º–∞–ª–æ—Å—å', e)
    }

    this.client.on('message', async (message) => {
      const chatId = message.chat.id
      const text = message.text
      const user = {name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω–æ–≤–∏—á', phone: '+79201563122', address: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 20'}
      const order = {tariff: '–≠–∫–æ', category: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', food: {
        monday: [
          {name: '–ü–∏—Ü—Ü–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        tuesday: [
          {name: '–ö–∞—à–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        wednesday: [
          {name: '–°—É–ø', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        thursday: [
          {name: '–°–∞–ª–∞—Ç', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        friday: [
          {name: '–Ø–±–ª–æ–∫–æ', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        saturday: [
          {name: '–ì—Ä—É—à–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ],
        sunday: [
          {name: '–ê–ø–µ–ª—å—Å–∏–Ω', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
        ]
      }, full_price_per_month: 2000, payment: 0}
      const tariff = [
        {name: '–ü–†–û ü•á', description: '', features: [
            {text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
            {text: '–õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –ø–æ –µ–¥–µ'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
        ], price_per_month: 3000},
        {name: '–°–†–ï–î–ù–ò–ô ü•à', description: '', features: [
            {text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
            {text: '–ö—É—Ä–∞—Ç–æ—Ä –ø–æ –µ–¥–µ'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
        ], price_per_month: 1000},
        {name: '–≠–ö–û ü•â', description: '', features: [
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
            {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
        ], price_per_month: 500}
      ]

      try {
        if (text === '/start') {
          return this.client.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è –¥–æ—Å—Ç–∞–≤—â–∏–∫ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üòÅ \n\n' +
            '–Ø –æ–±–ª–∞–¥–∞—é –±–æ–ª—å—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –µ–¥—ã, –∫–æ—Ç–æ—Ä—É—é —è –º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞ üçë\n\n' +
            '–ú–æ–∏ –ø–ª—é—Å—ã: \n' +
            '1. –ù–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è —á—Ç–æ –±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä ‚≠ê\n' +
            '2. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –µ–¥—ã üç≤\n' +
            '3. –¶–µ–Ω—ã –Ω–∏–∂–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ üî•\n' +
            '4. –í–∫—É—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã üíµ\n\n' +
            '–ï—Å–ª–∏ —è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, —Ç–æ —è —Ö–æ—á—É –ø–æ–ª—É—á—à–µ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                [{text: '–î–∞–≤–∞–π! ‚òÄ', callback_data: 'next-meet-1'}],
                [{text: '–ù–µ —Ö–æ—á—É üêÄ', callback_data: '/bye'}],
                ]
              })
            })
        }

        if (text === '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõç') {
          return this.client.sendMessage(chatId, '–í –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫—É—á—É –≤–∫—É—Å–Ω—ã—Ö –±–ª—é–¥, ' +
            '–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ç–µ–±–µ –ø—Ä–∏–≥–ª—è–Ω—É—Ç—Å—è! –ü—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∞ –∑–∞—Ç–µ–º —è —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –∏ –º—ã —É—Ç–≤–µ—Ä–¥–∏–º –¥–æ—Å—Ç–∞–≤–∫—É! üçì', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                [{text: '–ú–∞–≥–∞–∑–∏–Ω ‚≠ê', web_app: {url: this.website}}]
                ]
              })
            })
        }

        if (text === '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù') {
          return leaveReview(message, this.client)
        }

        if (text === '–ê–∫–∫–∞—É–Ω—Ç üìÉ') {
          await this.client.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –æ —Ç–µ–±–µ: üì∞\n\n–ò–º—è: ${user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n–ê–¥—Ä–µ—Å: ${user.address}`, {
            reply_markup: JSON.stringify({
              remove_keyboard: true
            }),
          })
          return this.client.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å? ‚öô', {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–î–∞ ‚úè', callback_data: 'changeData'}],
                [{text: '–ù–µ—Ç üöÄ', callback_data: 'dontChangeData'}],
              ]
            }),
          })
        }

        if (text === '–¢–∞—Ä–∏—Ñ—ã üç®') {
          return this.client.sendMessage(chatId, `${tariff.map(i => {
            return `–¢–∞—Ä–∏—Ñ ${i.name}\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${i.description}\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: \n${i.features.map(f => {
              return `‚ö´ ${f.text}\n`
            }).join('')}\n\n–¶–µ–Ω–∞: ${i.price_per_month} —Ä—É–±.\n\n`
          }).join('')}`, {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ü–†–û ü•á', callback_data: 'gotopro'}],
                [{text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –°–†–ï–î–ù–ò–ô ü•à', callback_data: 'gotoaverage'}],
                [{text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –≠–ö–û ü•â', callback_data: 'gotoeco'}],
              ]
            }),
          })
        }

        if (text === '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ üìà') {
          return this.client.sendMessage(chatId, `–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Ä–µ—à–∞–µ–º —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º ü§ú\n\n1. –ù–µ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å —á–µ–≥–æ –±—ã –ø–æ–µ—Å—Ç—å —É—Ç—Ä–æ–º/–¥–Ω–µ–º/–≤–µ—á–µ—Ä–æ–º üòä\n2. –ù–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É üëÄ\n3. –ù–µ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å, —á—Ç–æ–±—ã –≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å üò¨\n\n–ü–æ–∂–∞–ª—É–π —ç—Ç–æ –≤—Å–µ üòé`)
        }

        if (text === '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üíµ') {
          await this.client.sendMessage(chatId, `–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: ${order.tariff} ${order.tariff === '–ü—Ä–æ' ? 'ü•á' : order.tariff === '–°—Ä–µ–¥–Ω–∏–π' ? 'ü•à' : 'ü•â'}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${order.category}\n\n–ë–ª—é–¥–∞: \n\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: \n${order.food.monday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–í—Ç–æ—Ä–Ω–∏–∫: \n${order.food.tuesday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–°—Ä–µ–¥–∞: \n${order.food.wednesday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–ß–µ—Ç–≤–µ—Ä–≥: \n${order.food.thursday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–ü—è—Ç–Ω–∏—Ü–∞: \n${order.food.friday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–°—É–±–±–æ—Ç–∞: \n${order.food.saturday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: \n${order.food.sunday.map(i => {
            return `${i.name + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.quantity} \n`
          }).join('')}\n\n–í –º–µ—Å—è—Ü: ${order.full_price_per_month} —Ä—É–±.\n–û–ø–ª–∞—Ç–∞: ${order.payment === 1 ? '–û–ø–ª–∞—á–µ–Ω' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n
          `, {
            reply_markup: JSON.stringify({
              remove_keyboard: true
            }),
          })
          return this.client.sendMessage(chatId, '–ß—Ç–æ –Ω–∞—Å—á–µ—Ç –æ–ø–ª–∞—Ç—ã? üòÑ', {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–û–ø–ª–∞—Ç–∏—Ç—å üí≥', callback_data: 'pay'}],
                [{text: '–ü–æ–¥—É–º–∞—é ü§™', callback_data: 'think'}],
                [{text: '–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data: 'delete-order'}],
              ]
            }),
          })
        }

      } catch (e) {
        console.log(e)
      }
    })

    this.client.on('callback_query', async (message) => {
      const data = message.data
      const chatId = message.message.chat.id

      try {
        if (data === '/bye') {
          return this.client.sendMessage(chatId, '–≠—Ö—Ö, –Ω—É —Ç–æ–≥–¥–∞ —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! ü•®')
        }

        if (data === 'next-meet-1') {
          return respondTo(message, this.client)
        }

        if (data === 'changeData') {
          return changeAccountData(message, this.client)
        }

        if (data === 'dontChangeData') {
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ! –¢–æ–≥–¥–∞ –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é üöó', botOptions)
        }

        if (data === 'pay') {
          return this.client.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', botOptions)
        }

        if (data === 'think') {
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –ø–æ–¥—É–º–∞–µ–º! –ù—É –ø–æ–∫–∞ –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é üöó', botOptions)
        }

        if (data === 'delete-order') {
          return this.client.sendMessage(chatId, '–£–¥–∞–ª—è–µ–º... –ß—Ç–æ –Ω–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞? üç®', botOptions)
        }

        if (data === 'gotopro') {
          return this.client.sendMessage(chatId, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', botOptions)
        }

        if (data === 'gotoaverage') {
          return this.client.sendMessage(chatId, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', botOptions)
        }

        if (data === 'gotoeco') {
          return this.client.sendMessage(chatId, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', botOptions)
        }
      } catch (e) {
        console.log(e)
      }
    })
  }
}
