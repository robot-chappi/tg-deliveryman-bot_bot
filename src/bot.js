import TelegramBotClient from 'node-telegram-bot-api'
import StateMachine from 'javascript-state-machine'
import respondTo from './modules/registration'
import {STORE} from './modules/variables'
import changeAccountData from './modules/changeAccountData'
import {botOptions} from './modules/keyboards'
import leaveReview from './modules/leaveReview'
import {changeUserTariff, getFavoriteIngredient, getFavoriteProduct, getMe, getUnlovedIngredient} from './http/userAPI'
import {getTariffItems} from './http/tariffAPI'
import {getMealPlan, getOrder, getOrders, deleteOrders, deleteOrder} from './http/orderAPI'
import {deleteUserReviews, getUserReviews} from './http/reviewAPI'
import deleteReviewFsm from './modules/deleteReviewFsm'
// import sequelize from '../db/db'
const express = require('express')
const cors = require('cors')
const fileUpload = require('express-fileupload')
const sequelize = require('../db/db')
const models = require('../db/models/models')
const router = require('../db/routes/index')
const errorHandler = require('../db/middleware/ErrorHandlingMiddleware')
const path = require('path')
// const {order} = require('../src/mockdata/mockdata')

export default class Bot {
  constructor(token) {
    this.PORT = process.env.PORT || 5000
    this.app = express()
    this.app.use(cors())
    this.app.use(fileUpload({}))
    this.app.use(express.json())
    this.app.use(express.static(path.resolve(__dirname, '..', 'db', 'static')))
    this.app.use('/api', router)
    this.app.use(errorHandler)

    this.client = new TelegramBotClient(token, { polling: true })
    this.website = STORE

  }

  async start() {

    try {
      await sequelize.authenticate()
      await sequelize.sync()
      this.app.listen(this.PORT, () => console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—à–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ' + this.PORT))
    } catch (e) {
      console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DB —Å–ª–æ–º–∞–ª–æ—Å—å', e)
    }

    this.client.on('message', async (message) => {
      const chatId = message.chat.id
      const text = message.text
      const user = {name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω–æ–≤–∏—á', phone: '+79201563122', address: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª., –ú–æ—Å–∫–≤–∞, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 20'}
      // const order = {tariff: '–≠–∫–æ', category: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', food: {
      //   monday: [
      //     {name: '–ü–∏—Ü—Ü–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   tuesday: [
      //     {name: '–ö–∞—à–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   wednesday: [
      //     {name: '–°—É–ø', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   thursday: [
      //     {name: '–°–∞–ª–∞—Ç', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   friday: [
      //     {name: '–Ø–±–ª–æ–∫–æ', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   saturday: [
      //     {name: '–ì—Ä—É—à–∞', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ],
      //   sunday: [
      //     {name: '–ê–ø–µ–ª—å—Å–∏–Ω', price: 150, quantity: 1}, {name: '–†–æ–ª–ª—ã', price: 200, quantity: 1}, {name: '–ü–µ—á–µ–Ω—å–µ', price: 250, quantity: 1}
      //   ]
      // }, full_price_per_month: 2000, payment: 0}
      // const tariff = [
      //   {name: '–ü–†–û ü•á', description: '', features: [
      //       {text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
      //       {text: '–õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –ø–æ –µ–¥–µ'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //   ], price_per_month: 3000},
      //   {name: '–°–†–ï–î–ù–ò–ô ü•à', description: '', features: [
      //       {text: '–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'},
      //       {text: '–ö—É—Ä–∞—Ç–æ—Ä –ø–æ –µ–¥–µ'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //   ], price_per_month: 1000},
      //   {name: '–≠–ö–û ü•â', description: '', features: [
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //       {text: '–ß—Ç–æ-—Ç–æ –µ—â–µ...'},
      //   ], price_per_month: 500}
      // ]

      try {
        if (text === '/start') {
          return this.client.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è –¥–æ—Å—Ç–∞–≤—â–∏–∫ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üòÅ \n\n' +
            '–Ø –æ–±–ª–∞–¥–∞—é –±–æ–ª—å—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –µ–¥—ã, –∫–æ—Ç–æ—Ä—É—é —è –º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞ üçë\n\n' +
            '–ú–æ–∏ –ø–ª—é—Å—ã: \n' +
            '1. –ù–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è —á—Ç–æ –±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä ‚≠ê\n' +
            '2. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –µ–¥—ã üç≤\n' +
            '3. –¶–µ–Ω—ã –Ω–∏–∂–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ üî•\n' +
            '4. –í–∫—É—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã üíµ\n\n' +
            '–ï—Å–ª–∏ —è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, —Ç–æ —è —Ö–æ—á—É –ø–æ–ª—É—á—à–µ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                [{text: '–î–∞–≤–∞–π! ‚òÄ', callback_data: 'next-meet-1'}],
                [{text: '–ù–µ —Ö–æ—á—É üêÄ', callback_data: '/bye'}],
                ]
              })
            })
        }

        if (text === '/reload') {
          try {
            const user = await getMe(chatId)
            if (user) {
              return this.client.sendMessage(chatId, '–ü—Ä–æ—à—É –∫ —Å—Ç–æ–ª—É, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è', botOptions)
            }
            await this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é', {
              reply_markup: JSON.stringify({
                  hide_keyboard: true
              }
              )
            })
            return this.client.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è –¥–æ—Å—Ç–∞–≤—â–∏–∫ –≤–∫—É—Å–Ω–æ–π –µ–¥—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üòÅ \n\n' +
              '–Ø –æ–±–ª–∞–¥–∞—é –±–æ–ª—å—à–∏–º –∫–∞—Ç–∞–ª–æ–≥–æ–º –µ–¥—ã, –∫–æ—Ç–æ—Ä—É—é —è –º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –º–µ—Å—è—Ü–∞ üçë\n\n' +
              '–ú–æ–∏ –ø–ª—é—Å—ã: \n' +
              '1. –ù–µ –Ω—É–∂–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è —á—Ç–æ –±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä ‚≠ê\n' +
              '2. –®–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –µ–¥—ã üç≤\n' +
              '3. –¶–µ–Ω—ã –Ω–∏–∂–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ üî•\n' +
              '4. –í–∫—É—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã üíµ\n\n' +
              '–ï—Å–ª–∏ —è —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª, —Ç–æ —è —Ö–æ—á—É –ø–æ–ª—É—á—à–µ —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [{text: '–î–∞–≤–∞–π! ‚òÄ', callback_data: 'next-meet-1'}],
                  [{text: '–ù–µ —Ö–æ—á—É üêÄ', callback_data: '/bye'}],
                ]
              })
            })
          } catch (e) {
            console.log(e)
          }

        }

        if (text === '–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üõç') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')
          return this.client.sendMessage(chatId, '–í –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∫—É—á—É –≤–∫—É—Å–Ω—ã—Ö –±–ª—é–¥, ' +
            '–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ç–µ–±–µ –ø—Ä–∏–≥–ª—è–Ω—É—Ç—Å—è! –ü—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –¥–µ–Ω—å –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∞ –∑–∞—Ç–µ–º —è —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –∏ –º—ã —É—Ç–≤–µ—Ä–¥–∏–º –¥–æ—Å—Ç–∞–≤–∫—É! üçì', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                [{text: '–ú–∞–≥–∞–∑–∏–Ω ‚≠ê', web_app: {url: this.website}}]
                ]
              })
            })
        }

        if (text === '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üìù') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')

          return leaveReview(message, this.client)
        }

        if (text === '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã ‚úÖ') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')

          const userReviews = await getUserReviews(chatId);

          return this.client.sendMessage(chatId, `–í—Å–µ —Ç–≤–æ–∏ –æ—Ç–∑—ã–≤—ã:\n\n${userReviews.map((i) => {return `ID: ${i.id}\n–û—Ç–∑—ã–≤: ${i.text}\n–û—Ü–µ–Ω–∫–∞: ${i.mark}/10\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${i.isChecked ? '–¥–∞' : '–Ω–µ—Ç'}\n\n`}).join('')}–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–ª–∏ –æ–¥–∏–Ω –æ—Ç–∑—ã–≤, –∞ —Ç–∞–∫ –∂–µ –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è - —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! üôÇ`, {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–£–¥–∞–ª–∏—Ç—å –≤—Å—ë ‚ùå', callback_data: 'deleteAllReviews'}],
                [{text: '–£–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω üìù', callback_data: 'deleteOneReview'}],
                [{text: '–•–æ—Ä–æ—à–æ üëç', callback_data: 'ok'}],
              ]
            })
          })
        }

        if (text === '–ê–∫–∫–∞—É–Ω—Ç üìÉ') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')

          // const user = await getMe(chatId);
          await this.client.sendMessage(chatId, `–î–∞–Ω–Ω—ã–µ –æ —Ç–µ–±–µ: üì∞\n\n–ò–º—è: ${user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber}\n–ê–¥—Ä–µ—Å: ${user.address}\n–¢–∞—Ä–∏—Ñ: ${user.tariff.title}\n–†–æ–ª—å: ${user.role.title}`, {
            reply_markup: JSON.stringify({
              remove_keyboard: true
            }),
          })
          return this.client.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å? ‚öô', {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–î–∞ ‚úè', callback_data: 'changeData'}],
                [{text: '–ù–µ—Ç üöÄ', callback_data: 'dontChangeData'}],
              ]
            }),
          })
        }

        if (text === '–¢–∞—Ä–∏—Ñ—ã üç®') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')

          const tariffItems = await getTariffItems();
          // const user = await getMe(chatId);
          let tariffKeyboard = []
          let otherTariff = tariffItems.filter(function( obj ) {
            return obj.id !== user.tariff.id;
          });
          otherTariff.map(i => {
            return tariffKeyboard.push([{text: `–ü–æ–¥–∫–ª—é—á–∏—Ç—å ${i.title} ${i.title === '–≠–ö–û' ? 'ü•â' : i.title === '–°–†–ï–î–ù–ò–ô' ? 'ü•à' : 'ü•á'}`, callback_data: `got${i.title}`}])
          })

          return this.client.sendMessage(chatId, `${tariffItems.map(i => {
            return `–¢–∞—Ä–∏—Ñ ${i.title} ${i.id === user.tariff.id ? '(–≤—ã–±—Ä–∞–Ω)' : ''}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${i.description}\n–°–∫–∏–¥–∫–∞: ${i.discount}%\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: \n${i.privileges.map(f => {
              return `‚ö´ ${f.title}\n`
            }).join('')}\n\n–¶–µ–Ω–∞: ${i.price} —Ä—É–±.\n\n`
          }).join('')}`, {
            reply_markup: JSON.stringify({
              inline_keyboard: tariffKeyboard
            }),
          })
        }

        if (text === '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ üìà') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')
          return this.client.sendMessage(chatId, `–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –µ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Ä–µ—à–∞–µ–º —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º ü§ú\n\n1. –ù–µ –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å —á–µ–≥–æ –±—ã –ø–æ–µ—Å—Ç—å —É—Ç—Ä–æ–º/–¥–Ω–µ–º/–≤–µ—á–µ—Ä–æ–º üòä\n2. –ù–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É üëÄ\n3. –ù–µ –Ω—É–∂–Ω–æ —É–º–µ—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å, —á—Ç–æ–±—ã –≤–∫—É—Å–Ω–æ –ø–æ–µ—Å—Ç—å üò¨\n\n–ü–æ–∂–∞–ª—É–π —ç—Ç–æ –≤—Å–µ üòé`)
        }

        if (text === '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üíµ') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')
          // const user = await getMe(chatId);
          const order = await getOrder(chatId);

          if (!order) {
            return this.client.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ üòÑ', {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [{text: '–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ üçî', callback_data: 'allorders'}],
                  [{text: '–ù–µ –Ω—É–∂–Ω–æ üòí', callback_data: 'dontChangeData'}]
                ]
              }),
            })
          }

          const mealPlan = await getMealPlan(order.id);
          const favoriteIngredient = await getFavoriteIngredient(user.id);
          const unlovedIngredient = await getUnlovedIngredient(user.id);
          const favoriteProduct = await getFavoriteProduct(user.id);

          await this.client.sendMessage(chatId, `–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: ${user.tariff.title} ${user.tariff.title === '–ü–†–û' ? 'ü•á' : user.tariff.title === '–°–†–ï–î–ù–ò–ô' ? 'ü•à' : 'ü•â'}\n–ò–º—è: ${order.fullname}\n–ê–¥—Ä–µ—Å: ${order.address}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phoneNumber}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${order.category.title}\n–õ—é–±–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${favoriteIngredient.map((i) => {return `${i.ingredient.title}\n`}).join('')}\n–ù–µ–ª—é–±–∏–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${unlovedIngredient.map((i) => {return `${i.ingredient.title}\n`}).join('')}\n–ï–¥–∞ –∏–∑ –õ—é–±–∏–º–æ–µ: ${favoriteProduct.map((i) => {return `${i.product.title}\n`}).join('')}\n–¶–µ–Ω–∞: ${(order.price - order.price/100*user.tariff.discount) + user.tariff.price} (—Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É)\n–°–∫–∏–¥–∫–∞: ${user.tariff.discount}%\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: ${order.wish}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${order.isComplete ? '–¥–∞' : '–Ω–µ—Ç'}\n–û–ø–ª–∞—á–µ–Ω–æ: ${order.isPaid ? '–¥–∞' : '–Ω–µ—Ç'}\n\n–†–∞—Ü–∏–æ–Ω:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: \n${mealPlan['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–í—Ç–æ—Ä–Ω–∏–∫: \n${mealPlan['–í—Ç–æ—Ä–Ω–∏–∫'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–°—Ä–µ–¥–∞: \n${mealPlan['–°—Ä–µ–¥–∞'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–ß–µ—Ç–≤–µ—Ä–≥: \n${mealPlan['–ß–µ—Ç–≤–µ—Ä–≥'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–ü—è—Ç–Ω–∏—Ü–∞: \n${mealPlan['–ü—è—Ç–Ω–∏—Ü–∞'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–°—É–±–±–æ—Ç–∞: \n${mealPlan['–°—É–±–±–æ—Ç–∞'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}\n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: \n${mealPlan['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'].map(i => {
            return `${i.title + ' | ' + i.price + '—Ä—É–±.' + ' | ' + i.weight} \n`
          }).join('')}
          `, {
            reply_markup: JSON.stringify({
              remove_keyboard: true
            }),
          })
          return this.client.sendMessage(chatId, '–ß—Ç–æ –Ω–∞—Å—á–µ—Ç –æ–ø–ª–∞—Ç—ã? üòÑ', {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–û–ø–ª–∞—Ç–∏—Ç—å üí≥', callback_data: 'pay'}],
                [{text: '–ü–æ–¥—É–º–∞—é ü§™', callback_data: 'think'}],
                [{text: '–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data: 'delete-order'}],
              ]
            }),
          })
        }

      } catch (e) {
        console.log(e)
      }
    })

    this.client.on('callback_query', async (message) => {
      const data = message.data
      const chatId = message.message.chat.id

      try {
        if (data === '/bye') {
          return this.client.sendMessage(chatId, '–≠—Ö—Ö, –Ω—É —Ç–æ–≥–¥–∞ —É–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! ü•®')
        }

        if (data === 'next-meet-1') {
          return respondTo(message, this.client)
        }

        if (data === 'changeData') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')
          return changeAccountData(message, this.client)
        }

        if (data === 'dontChangeData') {
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ! –¢–æ–≥–¥–∞ –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é üöó', botOptions)
        }

        if (data === 'allorders') {
          const orders = await getOrders(chatId);
          if (orders.length < 1) return this.client.sendMessage(chatId, '–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç', botOptions)
          return this.client.sendMessage(chatId, `–í—Å–µ —Ç–≤–æ–∏ –∑–∞–∫–∞–∑—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –≤—Å–µ —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —á–∏—Å—Ç–∏—Ç—Å—è):\n\n${orders.map(i => {return `ID: ${i.id}\n–ò–º—è: ${i.fullname}\n–ê–¥—Ä–µ—Å: ${i.address}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${i.phoneNumber}\n–ü–æ–∂–µ–ª–∞–Ω–∏–µ: ${i.wish}\n–¶–µ–Ω–∞: ${i.price}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${i.isComplete ? '–¥–∞' : '–Ω–µ—Ç'}\n–û–ø–ª–∞—á–µ–Ω–æ: ${i.isPaid ? '–¥–∞' : '–Ω–µ—Ç'}\n\n`}).join('')}`, {
            reply_markup: JSON.stringify({
              inline_keyboard: [
                [{text: '–•–æ—Ä–æ—à–æ üëå', callback_data: 'ok'}],
                [{text: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ ‚ùå', callback_data: 'delete-orders'}],
              ]
            }),
          })
        }

        if (data === 'ok') {
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ –∫–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ üòä', botOptions)
        }

        if (data === 'pay') {
          const user = await getMe(chatId);
          if (!user) return this.client.sendMessage(chatId, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ /start üôÇ')

          return this.client.sendMessage(chatId, '–û–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...', botOptions)
        }

        if (data === 'think') {
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –ø–æ–¥—É–º–∞–µ–º! –ù—É –ø–æ–∫–∞ –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é üöó', botOptions)
        }

        if (data === 'deleteAllReviews') {
          await deleteUserReviews(chatId);
          return this.client.sendMessage(chatId, '–•–æ—Ä–æ—à–æ, –≤—Å—ë —É–¥–∞–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é üöó', botOptions)
        }

        if (data === 'deleteOneReview') {
          return deleteReviewFsm(message, this.client)
        }

        if (data === 'delete-orders') {
          const orders = await deleteOrders(chatId);
          if (orders.status === 'error') return this.client.sendMessage(chatId, '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ü§∑', botOptions)
          return this.client.sendMessage(chatId, '–£–¥–∞–ª–µ–Ω–æ –≤—Å–µ ‚úÖ', botOptions)
        }

        if (data === 'delete-order') {
          const order = await deleteOrder(chatId);
          if (order.status === 'error') return this.client.sendMessage(chatId, '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑', botOptions)
          return this.client.sendMessage(chatId, '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω ‚úÖ', botOptions)
        }

        if (data === 'got–ü–†–û') {
          await changeUserTariff({chatId: chatId, tariffTitle: '–ü–†–û'})
          return this.client.sendMessage(chatId, '–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω', botOptions)
        }

        if (data === 'got–°–†–ï–î–ù–ò–ô') {
          await changeUserTariff({chatId: chatId, tariffTitle: '–°–†–ï–î–ù–ò–ô'})
          return this.client.sendMessage(chatId, '–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω', botOptions)
        }

        if (data === 'got–≠–ö–û') {
          await changeUserTariff({chatId: chatId, tariffTitle: '–≠–ö–û'})
          return this.client.sendMessage(chatId, '–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω', botOptions)
        }
      } catch (e) {
        console.log(e)
      }
    })
  }
}
